#!/usr/bin/env bash

projectdir=$(dirname $0)
config="$projectdir/.config"
config_projects="$projectdir/.config.projects"
dashboard_file="$projectdir/dashboard.txt"
job_file="$projectdir/current_job.txt"

. $projectdir/history.bash

function update {
  echo "Updating..."
  node "$projectdir/index.mjs"
  exit
}

function main {
  dashboard_stat=$(stat -c %w $dashboard_file)
  dashboard_day=$(
    echo $dashboard_stat |
      cut -d- -f3 |
      cut -d' ' -f1
  )

  local current_day=$(date +"%d")

  if [[ $dashboard_day = $current_day ]]; then
    cat $dashboard_file
    echo "This is today dashboard"
    echo "For update dashboard, run command 'control update'"
    exit
  fi

  update
  exit
}

function inwork {
  if [[ ! -f $job_file ]]; then
    echo "You don\`t have current job"
    [[ $1 = "-e" ]] && exit
    towork
  fi

  # Update current issue
  if [[ $1 = '--update' || $1 = '-u' ]]; then
    local config_content=$(cat $config)
    local current_repo=$(echo "$config_content" | head -1)
    local current_issue=$(echo "$config_content" | tail -1)
    echo -n "Updating current issue..."
    towork $current_repo $current_issue
  fi

  cat $job_file
  exit
}

function control_dashboard_mark_current_job () {
  local job_link=$(tail -n1 "$projectdir/current_job.txt" | sed 's|/|\\/|g')
  sed -i "/$job_link/ s/./[ CURRENT JOB ] &/" "$dashboard_file"
}

function towork {
  # $1 - repository name
  # $2 - issue number(hash)
  if [[ (-n $1) && (-n $2) ]]; then
    node "$projectdir/to-work.mjs" "$1" "$2"
    echo -en "\033[1K" # clear line
    echo -en "\033[G"  # move cursor to 1 column
    cat "$projectdir/current_job.txt"
    control_dashboard_mark_current_job
    exit
  fi

  local prompt="Enter a repo name and issue number(hash) "
  read -p "$prompt" repo iss
  echo $repo >$config
  echo $iss >>$config
  start_job $repo $iss
  node "$projectdir/to-work.mjs" "$repo" "$iss"
  cat "$projectdir/current_job.txt"
  control_dashboard_mark_current_job
  exit
}

function control_dashboard_remove_current_job () {
  sed -i '/^\[ CURRENT JOB \]/d' "$dashboard_file"
}

function control_dashboard_skip_current_job () {
  sed -i 's/^\[ CURRENT JOB \]/\[ SKIP JOB \]/g' "$dashboard_file"
}

function donework {
  if [[ ! -f $job_file ]]; then
    echo "You don\`t have current job"
    exit
  fi

  local config_content=$(cat $config)
  local current_repo=$(echo "$config_content" | head -1)
  local current_issue=$(echo "$config_content" | tail -1)
  node $projectdir/done-work.mjs $current_repo $current_issue

  if [[ $? != 0 ]]; then
    echo "can't close the issue"
    exit
  fi

  rm -f "$projectdir/current_job.txt"
  end_job
  control_dashboard_remove_current_job
  echo >> $FILE_HISTORY
  echo "Job done"
  exit
}

function todo {
  # $1 - is empty or one of the flags:
  #      --read(-r) open file in less(default behavior)
  #      --add(-a)  open file in vi and go to last
  #                 line in insert mode
  #      --edit(-e) open file in vi
  local todo_file="$projectdir/todo.md"

  if [[ $1 = "--add" || $1 = "-a" ]]; then
    vi + +start $todo_file
    exit
  fi

  if [[ ! -f $todo_file ]]; then
    echo "You don't have ideas for projects"
    echo "If you want save ideas for future, use command 'control todo -a'"
    exit
  fi

  if [[ $1 = "--edit" || $1 = "-e" ]]; then
    vi $todo_file
    exit
  fi

  less $todo_file
  exit
}

function dowork {
  if [[ ! -e $config_projects ]]; then
    echo 'You need set path to all your projects'
    read -p "Please, enter absolute path to your projects directory: " path_to_projects

    if [[ ! -d $path_to_projects ]]; then
      echo 'Bad path, please try again'
      exit
    fi

    echo -n $path_to_projects > $config_projects
  fi

  if [[ -n $1 ]]; then
    if [[ ! -d $1 ]]; then
      echo 'Bad path, please try again'
      exit
    fi

    echo -n $1 > $config_projects
    exit
  fi

  local url=$(sed -n '2p' $job_file| cut -d'/' -f4-)
  local path_to_projects=$(head -n1 $config_projects)
  local current_project_dir=$(
    find $path_to_projects  -maxdepth 3 -type f -name config \
    | xargs grep $url \
    | cut -f1 -d'.'
  )

  echo "[ OPEN EDITOR ] in $current_project_dir"
  echo
  if [[ -n $(command -v $VISUAL) ]]; then
    $VISUAL $current_project_dir
  elif [[ -n $(command -v code) ]]; then
    # code - is a vscode editor
    code $current_project_dir 2>/dev/null
  else
    vi $current_project_dir
  fi

  $SHELL -c "cd $current_project_dir; cat $job_file; echo; echo '[ GIT STATUS ]'; git status; exec \"${SHELL:-sh}\""
  exit
}

function local_check {
  local path_to_projects=$(head -n1 $config_projects)
  local projects_dirs=$(ls -l $path_to_projects | grep ^d | rev | cut -f1 -d' ' | rev)

  for dir in $projects_dirs; do
    echo -e "\033[1m$dir\033[0m => $path_to_projects/$dir"
    cd "$path_to_projects/$dir"

    if [[ -d ".git" ]]; then
      local git_status=$(git status -s)
      local git_logs=$(git log origin/main..HEAD | git shortlog -s | cat)

      if [[ -z $git_status  ]]; then
        echo -e '\033[1m[OK]\033[0m You are not doing anything here'
      else
        git status -s
      fi

      if [[ ! -z $git_logs ]]; then
        echo 'You have unpushed commits' 
        echo $git_logs
      fi
    else
      echo '[BAD] Git not initialized!'
    fi

    cd $OLDPWD
    echo
  done

  exit
}

function control_estimate {
  # $1 - optional parameter empty or "-d"
  # if present "-d" - show detail list of jobs

  local file_estimate=$projectdir/.estimate
  rm -f $file_estimate

  mkdir -p /tmp/control/
  split -l 5 "$projectdir/.history" /tmp/control/

  for control_history_file in /tmp/control/*; do
    local file_length=$(wc -l $control_history_file | cut -d' ' -f1)

    if [[ $file_length -lt 5 ]]; then
      rm $control_history_file
      continue
    fi

    local date_end=$(sed -n '4p' $control_history_file | rev | cut -d' ' -f1 | rev)
    local date_start=$(sed -n '3p' $control_history_file | rev | cut -d' ' -f1 | rev)

    if [[ $date_end = $date_start ]]; then
      echo $date_end '1 day' >> $file_estimate
      continue
    fi

    local date_month_end=$(echo $date_end | cut -d'.' -f2)
    local date_month_start=$(echo $date_start | cut -d'.' -f2)

    if [[ $date_month_end = $date_month_start ]]; then
      local date_day_end=$(echo $date_end | cut -d'.' -f1)
      local date_day_start=$(echo $date_start| cut -d'.' -f1)
      echo $date_end $(($date_day_end - $date_day_start)) 'days' >> $file_estimate
      continue
    else
      echo $date_end 'Have months for job done, too long' >> $file_estimate
      continue
    fi
  done

  if [[ $1 = '-d' ]]; then
    tac $file_estimate | less
  fi

  uniq -c $file_estimate | awk '{if ($1 == "1") {printf $1 " job  "} else {printf $1 " jobs "}; for (i=2; i<NF; i++) printf $i " "; print $NF}'
  exit
}

function skip_work {
  rm -f "$projectdir/current_job.txt"
  skip_job
  control_dashboard_skip_current_job
  echo >> $FILE_HISTORY
  echo "Job skip"
  exit
}

# if arguments is 0, show dashboard(fetch
# new data or get from file(today))
if [ $# -eq 0 ]; then
  main
fi

# if $1 == update - fetch new data
if [[ $1 = "update" || $1 = "u" ]]; then
  update
fi

# if $1 == in-work - get current project
# and issue in work
# $2 - if is "-e", exit
#      if is "--update(-u)", update current issue
if [[ $1 = "in-work" || $1 = "in" ]]; then
  inwork $2
fi

# if $1 == to-work - set current project
# and issue in work
if [[ $1 = "to-work" || $1 = "to" ]]; then
  towork
fi

# if $1 == done - set current project
# and issue is done
# remove file 'current_job.txt'
if [[ $1 = "done" ]]; then
  donework
fi

# if $1 == todo - work with future ideas
if [[ $1 = "todo" ]]; then
  todo $2
fi

# if $1 == history - show available history of jobs
# if $2 is "clean" - delete all history
if [[ $1 = "history" ]]; then
  history $2
fi

# if $1 == do-work - open editor with project of current issues
# if $2 - must be the path to directory with projects(options, for set new path)
if [[ $1 = "do-work" || $1 = "do" ]]; then
  dowork $2
fi

# if $1 == local - show git status of local projects
if [[ $1 = "local" ]]; then
  local_check
fi

# $2 == -d - show details, job date and how long its take
if [[ $1 = "estimate" ]]; then
  control_estimate $2
fi

if [[ $1 = "skip" ]]; then
  skip_work
fi

if [[ $1 ]]; then
  echo "[ INFO ] Command not correct!"
  echo
  cat $projectdir/README.md
fi
