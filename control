#!/usr/bin/env bash

projectdir=$(dirname $0)
config="$projectdir/.config"

function update {
  echo "Updating..."
  node "$projectdir/index.mjs"
  exit
}

function main {
  dashboard_file="$projectdir/dashboard.txt"
  dashboard_stat=$(stat -c %w $dashboard_file)
  dashboard_day=$(
    echo $dashboard_stat |
      cut -d- -f3 |
      cut -d' ' -f1
  )

  local current_day=$(date +"%d")

  if [[ $dashboard_day = $current_day ]]; then
    cat $dashboard_file
    echo "This is today dashboard"
    echo "For update dashboard, run command 'control update'"
    exit
  fi

  update
  exit
}

function inwork {
  local job_file="$projectdir/current_job.txt"

  if [[ ! -f $job_file ]]; then
    echo "You don\`t have current job"
    [[ $1 = "-e" ]] && exit
    towork
  fi

  # Update current issue
  if [[ $1 = '--update' || $1 = '-u' ]]; then
    local config_content=$(cat $config)
    local current_repo=$(echo "$config_content" | head -1)
    local current_issue=$(echo "$config_content" | tail -1)
    echo -n "Updating current issue..."
    towork $current_repo $current_issue
  fi

  cat $job_file
  exit
}

function towork {
  # $1 - repository name
  # $2 - issue number(hash)
  if [[ (-n $1) && (-n $2) ]]; then
    node "$projectdir/to-work.mjs" "$1" "$2"
    echo -en "\033[1K" # clear line
    echo -en "\033[G"  # move cursor to 1 column
    cat "$projectdir/current_job.txt"
    exit
  fi

  local prompt="Enter a repo name and issue number(hash) "
  read -p "$prompt" repo iss
  echo $repo >$config
  echo $iss >>$config
  node "$projectdir/to-work.mjs" "$repo" "$iss"
  cat "$projectdir/current_job.txt"
  exit
}

function donework {
  rm -f "$projectdir/current_job.txt"
  echo "Job done"
}

function todo {
  # $1 - is empty or one of the flags:
  #      --read(-r) open file in less(default behavior)
  #      --add(-a)  open file in vi and go to last
  #                 line in insert mode
  #      --edit(-e) open file in vi
  local todo_file="$projectdir/todo.md"

  if [[ $1 = "--add" || $1 = "-a" ]]; then
    vi + +start $todo_file
    exit
  fi

  if [[ ! -f $todo_file ]]; then
    echo "You don't have ideas for projects"
    echo "If you want save ideas for future, use command 'control todo -a'"
    exit
  fi

  if [[ $1 = "--edit" || $1 = "-e" ]]; then
    vi $todo_file
    exit
  fi

  less $todo_file
  exit
}

# if arguments is 0, show dashboard(fetch
# new data or get from file(today))
if [ $# -eq 0 ]; then
  main
fi

# if $1 == update - fetch new data
if [[ $1 = "update" ]]; then
  update
fi

# if $1 == in-work - get current project
# and issue in work
# $2 - if is "-e", exit
#      if is "--update(-u)", update current issue
if [[ $1 = "in-work" ]]; then
  inwork $2
fi

# if $1 == to-work - set current project
# and issue in work
if [[ $1 = "to-work" ]]; then
  towork
fi

# if $1 == done - set current project
# and issue is done
# remove file 'current_job.txt'
if [[ $1 = "done" ]]; then
  donework
fi

# if $1 == todo - work with future ideas
if [[ $1 = "todo" ]]; then
  todo $2
fi
